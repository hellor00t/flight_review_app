{"ast":null,"code":"/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { keysOf } from '../components/common';\nexport var BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexport var BREAKPOINT_KEYS = keysOf(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimu width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexport function getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS; // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n\n  return keysOf(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}","map":{"version":3,"sources":["/Users/scott/Projects/flight_review_project/node_modules/@elastic/eui/es/services/breakpoint.js"],"names":["keysOf","BREAKPOINTS","xl","l","m","s","xs","BREAKPOINT_KEYS","getBreakpoint","width","breakpoints","arguments","length","undefined","find","key"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,MAAT,QAAuB,sBAAvB;AACA,OAAO,IAAIC,WAAW,GAAG;AACvBC,EAAAA,EAAE,EAAE,IADmB;AAEvBC,EAAAA,CAAC,EAAE,GAFoB;AAGvBC,EAAAA,CAAC,EAAE,GAHoB;AAIvBC,EAAAA,CAAC,EAAE,GAJoB;AAKvBC,EAAAA,EAAE,EAAE;AALmB,CAAlB;AAOP,OAAO,IAAIC,eAAe,GAAGP,MAAM,CAACC,WAAD,CAA5B;AACP;;;;;;;;;;AAUA,OAAO,SAASO,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,MAAIC,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEV,WAAtF,CADmC,CAEnC;;AACA,SAAOD,MAAM,CAACC,WAAD,CAAN,CAAoBa,IAApB,CAAyB,UAAUC,GAAV,EAAe;AAC7C,WAAOL,WAAW,CAACK,GAAD,CAAX,IAAoBN,KAA3B;AACD,GAFM,CAAP;AAGD","sourcesContent":["/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { keysOf } from '../components/common';\nexport var BREAKPOINTS = {\n  xl: 1200,\n  l: 992,\n  m: 768,\n  s: 575,\n  xs: 0\n};\nexport var BREAKPOINT_KEYS = keysOf(BREAKPOINTS);\n/**\n * Given the current `width` and an object of `EuiBreakpoints`,\n * this function returns the string that is the name of the breakpoint key\n * that is less than or equal to the width\n *\n * @param {number} width Can either be the full window width or any width\n * @param {EuiBreakpoints} breakpoints An object with keys for sizing and values for minimu width\n * @returns {string | undefined} Name of the breakpoint key or `undefined` if a key doesn't exist\n */\n\nexport function getBreakpoint(width) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BREAKPOINTS;\n  // Find the breakpoint (key) whose value is <= windowWidth starting with largest first\n  return keysOf(BREAKPOINTS).find(function (key) {\n    return breakpoints[key] <= width;\n  });\n}"]},"metadata":{},"sourceType":"module"}